"""Trigger management endpoints for the WebPush API"""import uuidfrom typing import Dict, List, Any, Optionalfrom fastapi import APIRouter, Depends, HTTPException, Query, Body, Path, status, Responsefrom sqlalchemy.ext.asyncio import AsyncSessionfrom api import depsfrom services import trigger_managerfrom models.schemas.trigger import TriggerCreate, TriggerUpdate, TriggerRead, TriggerType, TriggerStatusrouter = APIRouter()@router.post(    "/",    response_model=Dict[str, Any],    status_code=status.HTTP_201_CREATED,    summary="Create new trigger",    description="Create a new trigger")async def create_trigger(    trigger_data: TriggerCreate,    db: AsyncSession = Depends(deps.get_db),    current_user = Depends(deps.get_current_user_with_permissions(["automation:write"]))):    """Create a new trigger"""    try:        trigger = await trigger_manager.create_trigger(            db,            trigger_data        )        return trigger    except Exception as e:        raise HTTPException(            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,            detail=f"Failed to create trigger: {str(e)}"        )@router.get(    "/",    response_model=List[Dict[str, Any]],    summary="List triggers",    description="List all triggers with pagination and optional filters")async def list_triggers(    skip: int = Query(0, description="Number of records to skip"),    limit: int = Query(100, description="Maximum number of records to return"),    trigger_type: Optional[TriggerType] = Query(None, description="Filter by trigger type"),    status: Optional[TriggerStatus] = Query(None, description="Filter by trigger status"),    db: AsyncSession = Depends(deps.get_db),    current_user = Depends(deps.get_current_user_with_permissions(["automation:read"]))):    """List all triggers with pagination and optional filters"""    triggers = await trigger_manager.list_triggers(        db,        skip=skip,        limit=limit,        trigger_type=trigger_type,        status=status    )    return triggers@router.get(    "/{trigger_id}",    response_model=Dict[str, Any],    summary="Get trigger details",    description="Get detailed information about a specific trigger")async def get_trigger(    trigger_id: uuid.UUID = Path(..., description="Trigger ID"),    db: AsyncSession = Depends(deps.get_db),    current_user = Depends(deps.get_current_user_with_permissions(["automation:read"]))):    """Get details for a specific trigger"""    trigger = await trigger_manager.get_trigger(db, trigger_id)    if not trigger:        raise HTTPException(            status_code=status.HTTP_404_NOT_FOUND,            detail="Trigger not found"        )    return trigger@router.put(    "/{trigger_id}",    response_model=Dict[str, Any],    summary="Update trigger",    description="Update an existing trigger")async def update_trigger(    trigger_id: uuid.UUID = Path(..., description="Trigger ID"),    trigger_data: TriggerUpdate = Body(..., description="Updated trigger data"),    db: AsyncSession = Depends(deps.get_db),    current_user = Depends(deps.get_current_user_with_permissions(["automation:write"]))):    """Update an existing trigger"""    updated = await trigger_manager.update_trigger(        db,        trigger_id,        trigger_data    )    if not updated:        raise HTTPException(            status_code=status.HTTP_404_NOT_FOUND,            detail="Trigger not found or update failed"        )    return updated@router.delete(    "/{trigger_id}",    status_code=status.HTTP_204_NO_CONTENT,    summary="Delete trigger",    description="Delete a trigger")async def delete_trigger(    trigger_id: uuid.UUID = Path(..., description="Trigger ID"),    db: AsyncSession = Depends(deps.get_db),    current_user = Depends(deps.get_current_user_with_permissions(["automation:write"]))):    """Delete a trigger"""    success = await trigger_manager.delete_trigger(db, trigger_id)    if not success:        raise HTTPException(            status_code=status.HTTP_404_NOT_FOUND,            detail="Trigger not found or delete failed"        )    return Response(status_code=status.HTTP_204_NO_CONTENT)