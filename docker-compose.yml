version: "3.8"

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 20s # Give more time for initial setup

  web:
    build: .
    command: /bin/bash -c "alembic upgrade head && uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before starting
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  redis:
    image: redis:6
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  celery_worker:
    build: .
    command: celery -A workers.celery_worker:celery_app worker --loglevel=${LOG_LEVEL}
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before starting
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure:3

volumes:
  postgres_data:
